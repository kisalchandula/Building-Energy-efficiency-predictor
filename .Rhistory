set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 600,
trace = TRUE,
improve = 0.05)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 450,
trace = TRUE,
improve = 0.05)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 450,
mtry = 4,
importance = TRUE,
proximity = TRUE)
rf2$mse
rf1$mse
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf1$mse
rf2$rsq
rf1$rsq
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 4,
importance = TRUE,
proximity = TRUE)
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
View(energy)
View(energy)
runApp()
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# normalize data
preproc <- preProcess(energy[,1:8], method = "range")
energy <- predict(preproc, energy)
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 4,
importance = TRUE,
proximity = TRUE)
# prediction
pred1 <- predict(rf1,train)
pred2 <- predict(rf1,test)
test$heating_load
pred2
test
pred <- predict(rf1,test[1:8])
pred
test$heating_load
# prediction
pred <- predict(rf1,test[1:8])
print(rf1)
print(rf2)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
print(rf2)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 500,
trace = TRUE,
improve = 0.05)
t <- tuneRF(train[,1:8], train[,9],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 500,
trace = TRUE,
improve = 0.05)
which.min(rf2$mse)
which.min(rf1$mse)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 233,
trace = TRUE,
improve = 0.05)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE)
rf2
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 7,
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 20,
)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 20,
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 50,
)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 50,
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 100,
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 200,
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 70,
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 100,
)
rf2
539*75/100
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 100,
samplesize = 404
)
rf2
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 233,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 100,
samplesize = 430
)
rf2
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
rf2$mse
rf1$mse
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 4,
importance = TRUE,
proximity = TRUE,
maxnodes = 100,
samplesize = 430
)
rf2
runApp()
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE
)
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# normalize data
preproc <- preProcess(energy[,1:8], method = "range")
energy <- predict(preproc, energy)
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE
)
rf2 <- randomForest(cooling_load~., data = train, ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE
)
rf2
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
rf2 <- randomForest(cooling_load~., data = train[-9], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE
)
saveRDS(rf2, "model2.rds")
runApp()
runApp()
runApp()
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# normalize data
preproc <- preProcess(energy[,1:8], method = "range")
energy <- predict(preproc, energy)
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9])
# prediction
pred <- predict(rf1,test[1:8])
# Hyper parameter tuning for models
plot(rf1)
t <- tuneRF(train[,1:8], train[,9],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 500,
trace = TRUE,
improve = 0.05)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 233,
trace = TRUE,
improve = 0.05)
# save models
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
??submitButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kisal-wijeyesekera',
token='C5E8826C28FA99D20265CC6E63B34543',
secret='eAP+RycNMwkqScqn5XVU95OiDmZAjgwfpDm5xbkE')
library(rsconnect)
rsconnect::deployApp('F:\energy')
rsconnect::deployApp('F:/energy')
library(shiny)
runApp()
rsconnect::deployApp('F:/energy')
install.packages("tidyr")
rsconnect::deployApp('F:/energy')
library(tidyr)
library(tidyverse)
library(caret)
library(randomForest)
# import data
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# normalize data
preproc <- preProcess(energy[,1:8], method = "range")
energy <- predict(preproc, energy)
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9])
importance(rf1)
plot(importance(rf1))
View(energy)
importance(rf2)
runApp()
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9])
importance(rf1)
importance(rf2)
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
runApp()
library(tidyverse)
library(caret)
library(randomForest)
# import data
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9])
# prediction
pred <- predict(rf1,test[1:8])
# Hyper parameter tuning for models
plot(rf1)
t <- tuneRF(train[,1:8], train[,9],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 500,
trace = TRUE,
improve = 0.05)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 233,
trace = TRUE,
improve = 0.05)
# save models
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# normalization
preproc <- preProcess(energy[,1:8], method = "range")
energy <- predict(preproc, energy)
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9])
# prediction
pred <- predict(rf1,test[1:8])
# Hyper parameter tuning for models
plot(rf1)
t <- tuneRF(train[,1:8], train[,9],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 500,
trace = TRUE,
improve = 0.05)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 233,
trace = TRUE,
improve = 0.05)
# save models
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
runApp()
runApp()
energy <- read.csv("F:/energy/ENB2012_data.csv")
# rename columns
colnames(energy) <- c("relative_compactness", "surface_area", "wall_area",
"roof_area", "overall_height", "orientation", "glazing_area",
"glazing_area_distribution", "heating_load", "cooling_load")
# normalization
#preproc <- preProcess(energy[,1:8], method = "range")
#energy <- predict(preproc, energy)
# split data
set.seed(123)
ind <- sample(2, nrow(energy), replace = T, prob = c(0.7,0.3))
train <- energy[ind==1,]
test <- energy[ind==2,]
# modeling
rf1 <- randomForest(heating_load~., data = train[-10], ntree = 500,
mtry = 8,
importance = TRUE,
proximity = TRUE)
rf2 <- randomForest(cooling_load~., data = train[-9])
# prediction
pred <- predict(rf1,test[1:8])
# Hyper parameter tuning for models
plot(rf1)
t <- tuneRF(train[,1:8], train[,9],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 500,
trace = TRUE,
improve = 0.05)
t2 <- tuneRF(train[,1:8], train[,10],
stepFactor = 0.5,
plot = TRUE,
ntreeTry = 233,
trace = TRUE,
improve = 0.05)
# save models
saveRDS(rf1, "model1.rds")
saveRDS(rf2, "model2.rds")
runApp()
summary(energy)
View(energy)
runApp()
runApp()
summary(energy)
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='kisal-wijeyesekera',
token='C5E8826C28FA99D20265CC6E63B34543',
secret='eAP+RycNMwkqScqn5XVU95OiDmZAjgwfpDm5xbkE')
library(rsconnect)
rsconnect::deployApp('F:/energy')
rsconnect::deployApp('F:/energy')
rsconnect::setAccountInfo(name='kisal-wijeyesekera',
token='C5E8826C28FA99D20265CC6E63B34543',
secret='eAP+RycNMwkqScqn5XVU95OiDmZAjgwfpDm5xbkE')
rsconnect::deployApp('F:/energy')
rsconnect::forgetDeployment()
rsconnect::deployApp('F:/energy')
